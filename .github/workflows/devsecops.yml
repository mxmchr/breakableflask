name: Automatisation des tests DevSecOps
on: push

jobs:
  Dependances:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Scan des dépendances (Trivy FS)
        run: |
          set -euo pipefail
          docker run --rm \
            -v "$GITHUB_WORKSPACE":/project \
            -v "$HOME/.cache/trivy":/root/.cache/ \
            aquasec/trivy:latest fs /project/

  Dockerfile:
    runs-on: ubuntu-latest
    needs: Dependances
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug workspace
        run: |
          pwd
          ls -la
          echo "---- contenu breakableflask/ ----"
          ls -la breakableflask || true
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"

      - name: Installer jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Build image (Dockerfile dans breakableflask/)
        working-directory: breakableflask
        run: |
          set -euo pipefail
          docker build -t imgvulne:1.1 .

      - name: Scan de l'image (Trivy Image) + formatage
        run: |
          set -euo pipefail
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "$HOME/.cache/trivy":/root/.cache/ \
            aquasec/trivy:latest image --format json --severity HIGH,CRITICAL imgvulne:1.1 \
          | jq -r '
              ["TARGET","PACKAGE","INSTALLED","VULN","SEVERITY"],
              (.Results[]? as $r | $r.Vulnerabilities[]? | [$r.Target, .PkgName, .InstalledVersion, .VulnerabilityID, .Severity])
              | @tsv' \
          | column -t -s $'\t'

  Deploy:
    runs-on: ubuntu-latest
    needs: Dockerfile
    steps:
      - name: Deploy
        run: echo "Rien à faire ici. Votre application est prête à être déployée"
